//store a graph by adjacency matrix 
//it's take O(n) as time complexcity and NxN as space complexcity
#include<iostream>
using namespace std;
int main(){
    int n,m;
    cin>>n>>m;
    int adj [n+1] [m+1];
    for(int i=0 ;i<m;i++){
        int v,u;
        cin>>v>>u;
        adj[v][u]=1;
        adj[u][v]=1;
    }
    return 0;    
}

//store a graph by adjacency list
//it's take    as time complexcity and O(2E) as space complexcity
#include<bits/stdc++.h>
using namespace std;
int main(){
    int n,m;
    cin>>n>>m;
    vector<int>adj[n+1];
    for(int i=0 ;i<m;i++){
        int v,u;
        cin>>v>>u;
        //u--->v
        adj[u].push_back(v);
        //adj[v].push_back(u);
    }
    return 0;    
}
